作者：灵剑
链接：https://www.zhihu.com/question/47862508/answer/118064586
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

题主应该先系统学一下微机原理相关的教材的，我说的简单一点硬件中断从来不是发送给进程的，而是发送给操作系统内核，由内核统一处理，而不关心当前正在执行的是哪个进程，不管哪个进程操作都是一样的：
保存现场，进入内核，执行需要的操作，返回中断前的现场，继续进程执行。CPU写入外部设备有两种不同的方式，一种是直接操作硬件设备寄存器，这一般是不需要中断的，
CPU在写入一个寄存器的时候会处于阻塞状态，直到写入完成之前不能继续，因此通常只有处理非常少的数据的时候才会这样做。另一种方式是使用DMA，DMA是一个专用的外部设备，
CPU将需要发送的数据提前在内存中准备好，然后设置DMA设备的寄存器，让DMA设备从内存的指定位置开始，将内存中数据依次写到对应地址的外部硬件寄存器里，
这样在DMA写入的同时CPU就可以做其他工作。DMA写入完成后会产生一个中断通知CPU。这些都和当前执行的进程无关。进程只是直接跟操作系统内核通信，
内核负责通过调度来通知进程操作是否完成之类的信息。再举个详细点的例子，比如某个进程要读取一个文件，向内核发送了一个read的syscall调用，陷入内核，内核会设置DMA，
然后把进程挂起。因为进程挂起了，内核另找了一个进程切换进来执行。当DMA完成发生中断的时候，不管当前执行的是哪个进程，都会直接通过中断进入内核，这个过程外部执行的进程是察觉不到的，
它在执行的途中被打断然后冻结在了执行现场，就像时间停止了一样（这就是“中断”的含义），CPU开始执行内核中的中断处理程序，内核通知之前挂起的进程操作已经完成，并且取消挂起，
这时候这个进程是否会立即抢占进来，取决于优先级，在Linux当中一般会把因为IO挂起的进程优先级稍微调高一点让它们立即抢占进来，提高IO效率；但如果不能抢占进来，就会恢复当前的进程的执行，
等到高优先级执行结束后，再让之前挂起的进程切换进来继续执行，这对于执行IO的进程来说是不可见的。
